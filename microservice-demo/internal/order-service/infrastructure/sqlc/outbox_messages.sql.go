// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: outbox_messages.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createOutboxMessage = `-- name: CreateOutboxMessage :exec
INSERT INTO outbox_messages (
    id,
    aggregate_id,
    event_type,
    payload,
    created_at,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateOutboxMessageParams struct {
	ID          uuid.UUID       `json:"id"`
	AggregateID uuid.UUID       `json:"aggregate_id"`
	EventType   string          `json:"event_type"`
	Payload     json.RawMessage `json:"payload"`
	CreatedAt   time.Time       `json:"created_at"`
	Status      string          `json:"status"`
}

func (q *Queries) CreateOutboxMessage(ctx context.Context, arg CreateOutboxMessageParams) error {
	_, err := q.exec(ctx, q.createOutboxMessageStmt, createOutboxMessage,
		arg.ID,
		arg.AggregateID,
		arg.EventType,
		arg.Payload,
		arg.CreatedAt,
		arg.Status,
	)
	return err
}

const deleteOutboxMessage = `-- name: DeleteOutboxMessage :exec
DELETE FROM outbox_messages
WHERE id = $1
`

func (q *Queries) DeleteOutboxMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteOutboxMessageStmt, deleteOutboxMessage, id)
	return err
}

const getOutboxMessageByID = `-- name: GetOutboxMessageByID :one
SELECT id, aggregate_id, event_type, payload, message_id, created_at, processed_at, attempt_count, status, error_message
FROM outbox_messages
WHERE id = $1
`

func (q *Queries) GetOutboxMessageByID(ctx context.Context, id uuid.UUID) (OutboxMessage, error) {
	row := q.queryRow(ctx, q.getOutboxMessageByIDStmt, getOutboxMessageByID, id)
	var i OutboxMessage
	err := row.Scan(
		&i.ID,
		&i.AggregateID,
		&i.EventType,
		&i.Payload,
		&i.MessageID,
		&i.CreatedAt,
		&i.ProcessedAt,
		&i.AttemptCount,
		&i.Status,
		&i.ErrorMessage,
	)
	return i, err
}

const getPendingOutboxMessages = `-- name: GetPendingOutboxMessages :many
SELECT id, aggregate_id, event_type, payload, message_id, created_at, processed_at, attempt_count, status, error_message
FROM outbox_messages
WHERE status = 'pending'
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) GetPendingOutboxMessages(ctx context.Context, limit int32) ([]OutboxMessage, error) {
	rows, err := q.query(ctx, q.getPendingOutboxMessagesStmt, getPendingOutboxMessages, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OutboxMessage{}
	for rows.Next() {
		var i OutboxMessage
		if err := rows.Scan(
			&i.ID,
			&i.AggregateID,
			&i.EventType,
			&i.Payload,
			&i.MessageID,
			&i.CreatedAt,
			&i.ProcessedAt,
			&i.AttemptCount,
			&i.Status,
			&i.ErrorMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementAttempt = `-- name: IncrementAttempt :exec
UPDATE outbox_messages
SET attempt_count = attempt_count + 1
WHERE id = $1
`

func (q *Queries) IncrementAttempt(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.incrementAttemptStmt, incrementAttempt, id)
	return err
}

const markOutboxMessageFailed = `-- name: MarkOutboxMessageFailed :exec
UPDATE outbox_messages
SET status = 'failed',
    attempt_count = attempt_count + 1,
    error_message = $2
WHERE id = $1
`

type MarkOutboxMessageFailedParams struct {
	ID           uuid.UUID      `json:"id"`
	ErrorMessage sql.NullString `json:"error_message"`
}

func (q *Queries) MarkOutboxMessageFailed(ctx context.Context, arg MarkOutboxMessageFailedParams) error {
	_, err := q.exec(ctx, q.markOutboxMessageFailedStmt, markOutboxMessageFailed, arg.ID, arg.ErrorMessage)
	return err
}

const markOutboxMessageProcessed = `-- name: MarkOutboxMessageProcessed :exec
UPDATE outbox_messages
SET status = 'processed',
    processed_at = $2
WHERE id = $1
`

type MarkOutboxMessageProcessedParams struct {
	ID          uuid.UUID    `json:"id"`
	ProcessedAt sql.NullTime `json:"processed_at"`
}

func (q *Queries) MarkOutboxMessageProcessed(ctx context.Context, arg MarkOutboxMessageProcessedParams) error {
	_, err := q.exec(ctx, q.markOutboxMessageProcessedStmt, markOutboxMessageProcessed, arg.ID, arg.ProcessedAt)
	return err
}
