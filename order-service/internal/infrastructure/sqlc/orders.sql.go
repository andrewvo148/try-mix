// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (
    id, customer_id, status, total_price, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateOrderParams struct {
	ID         uuid.UUID `json:"id"`
	CustomerID string    `json:"customer_id"`
	Status     string    `json:"status"`
	TotalPrice string    `json:"total_price"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// db/queries.sql
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.exec(ctx, q.createOrderStmt, createOrder,
		arg.ID,
		arg.CustomerID,
		arg.Status,
		arg.TotalPrice,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createOrderItem = `-- name: CreateOrderItem :exec
INSERT INTO order_items (
    id, order_id, product_id, quantity, price
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateOrderItemParams struct {
	ID        uuid.UUID `json:"id"`
	OrderID   uuid.UUID `json:"order_id"`
	ProductID string    `json:"product_id"`
	Quantity  int32     `json:"quantity"`
	Price     string    `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) error {
	_, err := q.exec(ctx, q.createOrderItemStmt, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteOrderStmt, deleteOrder, id)
	return err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items
WHERE id = $1 AND order_id = $2
`

type DeleteOrderItemParams struct {
	ID      uuid.UUID `json:"id"`
	OrderID uuid.UUID `json:"order_id"`
}

func (q *Queries) DeleteOrderItem(ctx context.Context, arg DeleteOrderItemParams) error {
	_, err := q.exec(ctx, q.deleteOrderItemStmt, deleteOrderItem, arg.ID, arg.OrderID)
	return err
}

const deleteOrderItems = `-- name: DeleteOrderItems :exec
DELETE FROM order_items
WHERE order_id = $1
`

func (q *Queries) DeleteOrderItems(ctx context.Context, orderID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteOrderItemsStmt, deleteOrderItems, orderID)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, status, total_price, created_at, updated_at FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.queryRow(ctx, q.getOrderStmt, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, product_id, quantity, price FROM order_items
WHERE order_id = $1
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.query(ctx, q.getOrderItemsStmt, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, status, total_price, created_at, updated_at FROM orders
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.query(ctx, q.listOrdersStmt, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET status = $1, total_price = $2, updated_at = $3
WHERE id = $4
`

type UpdateOrderParams struct {
	Status     string    `json:"status"`
	TotalPrice string    `json:"total_price"`
	UpdatedAt  time.Time `json:"updated_at"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.exec(ctx, q.updateOrderStmt, updateOrder,
		arg.Status,
		arg.TotalPrice,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
